# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = edix/db/migrations

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to edix/db/migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path
# version_locations = %(here)s/bar %(here)s/bat edix/db/migrations/versions

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# Add the '--autogenerate' argument to the 'revision' command
# if you want to generate migrations automatically.
# autogenerate = true

# Add the '--autogenerate-comment' argument to the 'revision' command
# if you want to add a comment to the generated migration.
# autogenerate_comment = ""

# Add the '--autogenerate-options' argument to the 'revision' command
# if you want to specify additional options for autogenerate.
# autogenerate_options = ""

# Add the '--head' argument to the 'revision' command
# if you want to specify the head revision to use.
# head = head

# Add the '--splice' argument to the 'revision' command
# if you want to create a merge revision.
# splice = false

# Add the '--branch-label' argument to the 'revision' command
# if you want to specify a branch label.
# branch_label = None

# Add the '--version-path' argument to the 'revision' command
# if you want to specify a specific version path.
# version_path = None

# Add the '--rev-id' argument to the 'revision' command
# if you want to specify a specific revision id.
# rev_id = None

# Add the '--depends-on' argument to the 'revision' command
# if you want to specify dependencies.
# depends_on = None

# Add the '--path' argument to the 'revision' command
# if you want to specify a specific path.
# path = None

# Add the '--sourceless' argument to the 'revision' command
# if you want to create a sourceless revision.
# sourceless = false

# Add the '--sql' argument to the 'revision' command
# if you want to generate SQL instead of running the migration.
# sql = false

# Add the '--indicate-current' argument to the 'revision' command
# if you want to indicate the current revision.
# indicate_current = false

# Add the '--autogenerate' argument to the 'revision' command
# if you want to generate migrations automatically.
# autogenerate = false

# Add the '--autogenerate-comment' argument to the 'revision' command
# if you want to add a comment to the generated migration.
# autogenerate_comment = ""

# Add the '--autogenerate-options' argument to the 'revision' command
# if you want to specify additional options for autogenerate.
# autogenerate_options = ""

# Add the '--head' argument to the 'revision' command
# if you want to specify the head revision to use.
# head = head

# Add the '--splice' argument to the 'revision' command
# if you want to create a merge revision.
# splice = false

# Add the '--branch-label' argument to the 'revision' command
# if you want to specify a branch label.
# branch_label = None

# Add the '--version-path' argument to the 'revision' command
# if you want to specify a specific version path.
# version_path = None

# Add the '--rev-id' argument to the 'revision' command
# if you want to specify a specific revision id.
# rev_id = None

# Add the '--depends-on' argument to the 'revision' command
# if you want to specify dependencies.
# depends_on = None

# Add the '--path' argument to the 'revision' command
# if you want to specify a specific path.
# path = None

# Add the '--sourceless' argument to the 'revision' command
# if you want to create a sourceless revision.
# sourceless = false

# Add the '--sql' argument to the 'revision' command
# if you want to generate SQL instead of running the migration.
# sql = false

# Add the '--indicate-current' argument to the 'revision' command
# if you want to indicate the current revision.
# indicate_current = false

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks=black
# black.type=console_scripts
# black.entrypoint=black
# black.options=-l 79

# lint with flake8
# hooks=flake8
# flake8.type=console_scripts
# flake8.entrypoint=flake8
# flake8.options=--max-line-length=79 --indent-size=4

# format using "black" and lint with flake8
# hooks=black,flake8
# black.type=console_scripts
# black.entrypoint=black
# black.options=-l 79
# flake8.type=console_scripts
# flake8.entrypoint=flake8
# flake8.options=--max-line-length=79 --indent-size=4

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
